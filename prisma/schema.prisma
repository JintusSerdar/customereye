// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  purchases     Purchase[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model AIData {
  id          String   @id @default(cuid())
  content     Json     // Stores the AI-generated data in JSON format
  type        String   // Type of AI data (e.g., "sentiment", "behavior", "feedback")
  metadata    Json?    // Additional metadata about the data
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  reports     Report[]
}

model Report {
  id          String   @id @default(cuid())
  title       String
  description String?
  data        Json     // Stores the report data and visualizations
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  aiDataId    String
  aiData      AIData   @relation(fields: [aiDataId], references: [id])
}

model Category {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  documents   Document[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Document {
  id          String     @id @default(cuid())
  title       String
  description String?
  category    Category   @relation(fields: [categoryId], references: [id])
  categoryId  String
  companyName String
  price       Float      @default(0)
  textFiles   TextFile[]
  imageFiles  ImageFile[]
  purchases   Purchase[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model TextFile {
  id         String   @id @default(cuid())
  document   Document @relation(fields: [documentId], references: [id])
  documentId String
  fileName   String
  s3Key      String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model ImageFile {
  id         String   @id @default(cuid())
  document   Document @relation(fields: [documentId], references: [id])
  documentId String
  fileName   String
  s3Key      String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Preview {
  id          String   @id @default(cuid())
  content     Json     // Stores the preview content (limited version)
  documentId  String   @unique
  document    Document @relation(fields: [documentId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Purchase {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  document   Document @relation(fields: [documentId], references: [id])
  documentId String
  purchasedAt DateTime @default(now())
}
